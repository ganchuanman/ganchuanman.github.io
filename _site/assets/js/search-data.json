{"0": {
    "doc": "面向对象编程",
    "title": "面向对象编程",
    "content": " ",
    "url": "/docs/docs/software-develop/AndroidDevMap/Java/basic/01_OOP/",
    
    "relUrl": "/docs/software-develop/AndroidDevMap/Java/basic/01_OOP/"
  },"1": {
    "doc": "异常体系",
    "title": "异常体系",
    "content": " ",
    "url": "/docs/docs/software-develop/AndroidDevMap/Java/basic/02_Exception/",
    
    "relUrl": "/docs/software-develop/AndroidDevMap/Java/basic/02_Exception/"
  },"2": {
    "doc": "生活",
    "title": "生活",
    "content": " ",
    "url": "/docs/docs/life/",
    
    "relUrl": "/docs/life/"
  },"3": {
    "doc": "基础编程",
    "title": "基础编程",
    "content": " ",
    "url": "/docs/docs/software-develop/AndroidDevMap/Java/basic/",
    
    "relUrl": "/docs/software-develop/AndroidDevMap/Java/basic/"
  },"4": {
    "doc": "集合",
    "title": "集合",
    "content": " ",
    "url": "/docs/docs/software-develop/AndroidDevMap/Java/collections/",
    
    "relUrl": "/docs/software-develop/AndroidDevMap/Java/collections/"
  },"5": {
    "doc": "Java",
    "title": "Java",
    "content": " ",
    "url": "/docs/docs/software-develop/AndroidDevMap/Java/",
    
    "relUrl": "/docs/software-develop/AndroidDevMap/Java/"
  },"6": {
    "doc": "Android开发知识体系",
    "title": "Android开发知识体系",
    "content": " ",
    "url": "/docs/docs/software-develop/AndroidDevMap/",
    
    "relUrl": "/docs/software-develop/AndroidDevMap/"
  },"7": {
    "doc": "Android开发知识体系",
    "title": "缘起",
    "content": "在经过了大概小一个月的 找工作的历程 后，回顾过去一个月中大概小 30 场的面试，我意识到了一个问题，社招场景下的面试，大概是围绕以下几个部分去进行的： . | 项目经历：这个没什么好说的，个人有个人的项目经历。 | 专业技能：俗称“八股文”。 | 软素质：工作的方式方法，思维方式，抗压能力，个人成长历程… | . 其中专业技能占比并不低，尤其是在一二面中，相当部分的内容都是围绕这种所谓的“八股文”展开的，如果能够把这些碎片化的点，体系化的总结出来，无疑对今后的职业发展是有益的，毕竟体系化的总结往往能够带来高效率的复习，今后如果再去面试，涉及到的这些碎片化知识点能够很快的被捡起来，能够更快更全面的进入面试状态，从而提升自己在就业市场的竞争力。 . 于是萌生了一个以知识树的方式去构建一个 Android（可能之后还会有大前端？） 开发者的知识库，这个知识库不是零碎的八股文总结，而是通过树状的思维导图的方式来组织整个知识库。 . ",
    "url": "/docs/docs/software-develop/AndroidDevMap/#%E7%BC%98%E8%B5%B7",
    
    "relUrl": "/docs/software-develop/AndroidDevMap/#缘起"
  },"8": {
    "doc": "Android开发知识体系",
    "title": "知识体系",
    "content": "导图如下： . | ❗️为待整理，可以先 star 收藏一下～ . | ✅为整理完成，可以在左侧相应的目录树下面看到整理的内容。 . 思维导图使用 亿图脑图 MindMaster 绘制，如果本站点的内容对你有帮助且你也刚好需要一款不错的思维导图管理软件，那不妨顺带让我赚点佣金吧，🫶。 . | . ",
    "url": "/docs/docs/software-develop/AndroidDevMap/#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB",
    
    "relUrl": "/docs/software-develop/AndroidDevMap/#知识体系"
  },"9": {
    "doc": "React基础概念",
    "title": "React基础概念",
    "content": " ",
    "url": "/docs/docs/software-develop/React/ReactBasic/",
    
    "relUrl": "/docs/software-develop/React/ReactBasic/"
  },"10": {
    "doc": "React",
    "title": "React学习笔记",
    "content": "React知识库 . ",
    "url": "/docs/docs/software-develop/React/#react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0",
    
    "relUrl": "/docs/software-develop/React/#react学习笔记"
  },"11": {
    "doc": "React",
    "title": "React",
    "content": " ",
    "url": "/docs/docs/software-develop/React/",
    
    "relUrl": "/docs/software-develop/React/"
  },"12": {
    "doc": "软件开发",
    "title": "软件开发",
    "content": "记录日常开发过程中遇到的问题和解决方案。 . ",
    "url": "/docs/docs/software-develop/",
    
    "relUrl": "/docs/software-develop/"
  },"13": {
    "doc": "首页",
    "title": "首页",
    "content": ". ",
    "url": "/docs/",
    
    "relUrl": "/"
  },"14": {
    "doc": "阅读",
    "title": "阅读",
    "content": "闲时便读书吧 . ",
    "url": "/docs/docs/read/",
    
    "relUrl": "/docs/read/"
  },"15": {
    "doc": "关于找工作，一些感想",
    "title": "关于找工作，一些感想",
    "content": " ",
    "url": "/docs/docs/life/%E5%85%B3%E4%BA%8E%E6%89%BE%E5%B7%A5%E4%BD%9C%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/",
    
    "relUrl": "/docs/life/%E5%85%B3%E4%BA%8E%E6%89%BE%E5%B7%A5%E4%BD%9C%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/"
  },"16": {
    "doc": "关于找工作，一些感想",
    "title": "一些感想和总结：",
    "content": "TODO . ",
    "url": "/docs/docs/life/%E5%85%B3%E4%BA%8E%E6%89%BE%E5%B7%A5%E4%BD%9C%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/#%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3%E5%92%8C%E6%80%BB%E7%BB%93",
    
    "relUrl": "/docs/life/%E5%85%B3%E4%BA%8E%E6%89%BE%E5%B7%A5%E4%BD%9C%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/#一些感想和总结"
  },"17": {
    "doc": "关于找工作，一些感想",
    "title": "面经：",
    "content": "公司A： . 一面： . | 泛型机制以及泛型要解决的问题和泛型通配符。 | fragment 传参方式。 | fragment 之间的通信方式，jetpack 组件提供的通信方式。 | ViewModel 的出现是为了解决什么问题。 | kotlin 的属性委托 | 子线程为什么不能 new 一个 Handler。 | 主线程的Looper是什么时候创建的。 | Kotlin 协程异常处理机制。 | 大图长图的处理一般怎么做。 | 算法题：字符串转整数 atoi | . 二面： . | 商品管理重构成小程序，原因是什么。 | 商家客服由 Lynx 重构为 Native，Lynx 性能很差吗？它跟 ReactNative 的区别是什么？ | wait和 notify 的区别 | wait 和 sleep的区别 | volatile 和 synchronized 关键字的区别 | 为什么 object.wait 操作一般都会要放到 while(xxx) 循环里。 | https 的工作流程。 | http1.0 和 http2.0 的区别 | Kotlin 协程的原理？ | 对于大图的处理。 | 说一个自己用过的设计模式，不要太简单的那种。 | 算法题：26 进制转换 | . 三面： . | 工作有没有压力特别大时候，为什么，怎么解决。 | 工作上有没有遇到过什么特别难受的事情，怎么解决的。 | 团队协作有没有遇到跟后端协作上的问题。 | 提问环节：在当下我这个经验阶段，我更应该关注的术和道是什么？ | . 百幄 . | 商品模块是什么，为什么重构为小程序，小程序的底层实现是什么，TTWebView 的实现原理。 | Flutter 和 Compose 以及 ArkUI 的原理差异。 | 并发有没有遇到过什么问题，并发容器了解的怎么样 | 模板卡片有多少个原子物料： | Kotlin 跟 Java 对比，他有哪些优势 | Kotlin 协程原理，协程是怎么调度的 | . 公司B： . 一面： . | 插件化原理。 | handler messagequeue looper。 | 一个线程可以有几个 handler。 | 同步屏障，Looper 怎么区分是不是个同步屏障消息。 | 线程 notify 和 notifyall 的区别。 | Android 事件分发机制，点击一个按钮到 onClick 的流程，在 dispatchTouchEvent 拦截事件和 onInterceptTouchEvent 拦截事件的区别。 | 手势传递，有没有处理过 lynx 的手势冲突。 | 了解过启动优化吗？应用的启动流程 | kotlin JvmOverloads 注解 | 动态代理原理 | kotlin 扩展方法实现原理 | kotlin 协程 | kotlin flow 用过吗 | 协程有哪些作用域 | kotlin 协变和逆变 | kotlin inline 和 reified 关键字原理 | kotlin 密封类用过吗，为什么不用枚举 | 设计模式简单说两个 | 算法题：重排链表 | . 二面： . | https 的握手流程，客户端在收到服务端的公钥后，是怎么去验证公钥的。 | charles 抓包的实现原理，为什么 charles 能够抓到铭文的内容。 | synchronized 关键字的用法和原理。 | 下面这段代码，如果调用是不同的线程，表现是什么 class A { public void synchronized method1() { xxx } public void method2() { xxx synchronized(this) { xxx } xxx } } . | 从点击桌面 icon，到应用 app 启动的流程 | ViewModel 的原理，LiveData 的原理，Fragment 里边通过 activity 为什么拿到的都是同一个 ViewModel，LiveData 怎么保证收到最新的数据。 | activity 在进入到 resume 之后，是怎么开始绘制流程的，同步屏障，异步消息。 | 绘制完之后，点击 activity 里边的按钮，事件是怎么传递到按钮上的。屏幕的触摸硬件信号怎么样传递给对应的 app 进程。 | 架构和性能优化做过哪一些。 | kotlin inline 关键字 | 算法题：反转链表 | . 公司C： . 一面： . | 商品管理为什么要重构为小程序，收益是什么。 | C端 Native 重构，你主要做了什么。 | 推动 30+业务方介入 Native客服，你在里边的工作是什么，是一个什么样的角色。 | Java 和 Android 序列化方式以及原理。 | 协程和线程的区别。 | 首屏优化做了那一些，在拿到数据之前怎么能够更快的让首屏展示出来。 | View 的绘制流程 ，RecyclerView 上下两张卡片，绘制流程比如是上一张的 onMeasure 执行完再回调下一张的 onMeasure 吗？ | 架构优化工作做了哪一些。 | ViewModel 的原理，ViewModelProvider | LiveData 粘性事件。 | 协程有哪些作用域。 | Activiy 的状态保存的两个方法原理。 | Fragment 中使用 LiveData 会有什么坑。 | 这么多年，工作思维方式有什么转变。 | 如果一个事情，对业务方没有收益，也没有上级压力，怎么推动别人去配合你做改造。 | . 二面： . 忘记记录了。 . 公司D： . 一面： . 忘记记录了。 . 二面： . | OOM 解过吗？ANR 解过吗？ | 解决 OOM 问题的场景？ | 解决 ANR 问题的场景？ | 性能优化做过哪一些？ | 启动优化相关的： | 架构优化工作做过哪些？ | 插件化解决的问题是什么？ | 刚刚提到插件化主要是为了解决包大小，那 Android包大小的优化方案有哪些? | 无用代码优化怎么去做？ | 开放性问题：如果让你设计一个支付模块，你会怎么设计？ | 模板卡片解决的问题是什么？ | 端到端视角？ | . 三面： . | Lynx 重构为 native，是因为什么，在现在这个时间节点看这个结论能成立吗？ | 重构为 Native 在里边充当的角色是什么 | 你自己认为过去做过的所有项目中，最有技术挑战或者值得拿出来介绍的项目是什么？ | 满意度这个指标怎么去解决，发放调研卡能够提升这个指标吗？ | 有没有做一些大模型流式输出的东西，如果要做，你觉得需要关注哪些点。 | 对下一份工作的预期是什么，比如业务方面，技术方面有哪些期望？ | . 公司E： . 一面： . | native 重构的原因是什么？Lynx 性能表现差具体原因是什么？放量的过程怎么保证质量，两个版本同时存在怎么确保放量的数据收益不是因为lynx 迭代的需求引起的？ | git rebase 和 merge 的区别？ | git 如何合并多个 commit？ | https 的 s 指的是什么？ | charles 抓包的原理 | https能够防止DNS劫持吗？ | Java 继承知识：构造函数，初始化代码块，静态代码块在继承中的执行顺序 | 重写和重载的区别，变量能够重写吗？ | Java 异常体系： | ActiviytA启动 AcitivityB 的生命周期，ActivityB 回退到 ActivityA 的生命周期： | 生命周期进入 onPause 以后还能点击吗？ | 有办法在不 root 的情况下，比如跳过快手抖音的开屏广告吗？ | 算法题：十进制转二进制， 二面： . 忘记记录了。 算法题：两个数字字符串，模拟乘法。 . | . 公司F： . 一面： . | imsdk收发消息的流程是怎么样的 | 长链接断了会怎么样的表现 | websocket的建立流程，为什么 websocket 的建立需要先用 https 建立连接后再走协议升级 | 有了 tcp 为什么还需要有一个 websocket 协议？ | 鸿蒙版本商家客服迭代的过程是怎样的？ | 客服模块从Lynx重构为Native客服的背景是什么？ | 模板卡片的核心流程 | 商品管理模块从 Native 重构为小程序的背景是什么？ | im场景下的架构跟普通页面的架构有什么不一样的地方？ | Java跟kotlin相比有哪些优势 | 协程的原理 | 手搓一个Android Looper机制 | . 二面： . 忘记记录了。 . 公司G： . 一面： . | 插件化原理。 | imsdk 的架构和性能优化做过哪一些。 | 浏览器输入一个url，发生了什么。 | Native改造项目。 | 商品模块重构成小程序的目的。 | Java 集合有哪些，HashMap 的底层实现。 | 鸿蒙状态管理的原理。 | 鸿蒙有没有性能问题。 | 算法题：汉明距离，统计两个十进制数字的二进制有多少个差异位。 | . 公司H： . 一面： . | Activity嵌套Fragment的生命周期： | 应用启动流程，其中涉及到的一些性能优化的点： | 应用首次启动，隐私弹窗怎么去做。 | 有没有遇到过Sqlite数据库的性能问题。 | IM核心的消息收发，历史消息同步流程。 | React、Flutter、ArkUI的异同 | 鸿蒙上有没有遇到过性能问题 | 算法题：类似 leetcode 原题 | . 公司I： . 一面： . 不对口，二十多分钟直接结束 . | 评价一下自己： | Java多态的底层实现。 | Context 为什么不能是一个单例。 | . 公司J： . 一面： . 忘记记录了，挺简单的。ArrayList 和 LinkedList 跟面试官扯了二十多分钟，挺无语的。 . 二面： . 二面上午被通知部门 hc 被收回，没有二面。 . 公司K： . 一面： . | new Handler 然后发送一个空的延迟消息会不会内存泄露。 | handler 内存泄露的引用链 | RecyclerView 中有一个 Item 是 TextView，先长按 RV，再拖动然后滑动，最后手指抬起，这中间的事件分发流程是怎么样的。 | 做过最有挑战的项目是什么，怎么实施的。 | 假设现在让你来做一个 IM，类似微信，你觉得有哪些重要的点。 | . ",
    "url": "/docs/docs/life/%E5%85%B3%E4%BA%8E%E6%89%BE%E5%B7%A5%E4%BD%9C%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/#%E9%9D%A2%E7%BB%8F",
    
    "relUrl": "/docs/life/%E5%85%B3%E4%BA%8E%E6%89%BE%E5%B7%A5%E4%BD%9C%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/#面经"
  },"18": {
    "doc": "我看见的世界-李飞飞自传",
    "title": "我看见的世界-李飞飞自传",
    "content": "李飞飞是一个非常有影响力的计算机科学家，他的自传被认为是计算机科学史上最具影响力的著作之一。 李飞飞的自传主要介绍了他在计算机科学领域的研究和发展。他的自传中包含了许多重要的思想和概念，这些思想和概念对计算机科学的发展和进步起到了重要的作用。 李飞飞的自传还包含了许多重要的事件和案例，这些事件和案例对计算机科学的发展和进步起到了重要的作用。 李飞飞的自传还包含了许多重要的思想和概念，这些思想和概念对计算机科学的发展和进步起到了重要的作用。 . ",
    "url": "/docs/docs/read/%E6%88%91%E7%9C%8B%E8%A7%81%E7%9A%84%E4%B8%96%E7%95%8C-%E6%9D%8E%E9%A3%9E%E9%A3%9E%E8%87%AA%E4%BC%A0/",
    
    "relUrl": "/docs/read/%E6%88%91%E7%9C%8B%E8%A7%81%E7%9A%84%E4%B8%96%E7%95%8C-%E6%9D%8E%E9%A3%9E%E9%A3%9E%E8%87%AA%E4%BC%A0/"
  }
}
